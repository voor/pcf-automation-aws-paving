---
resource_types:
  - name: terraform
    type: docker-image
    source:
      repository: ljfranklin/terraform-resource
      tag: 0.11.14

  - name: pivnet
    type: docker-image
    source:
      repository: pivotalcf/pivnet-resource
      tag: latest-final

  - name: kubernetes
    type: docker-image
    source:
      repository: zlabjp/kubernetes-resource
      tag: "1.15"

resources:
  - name: platform-automation-pivnet
    type: pivnet
    icon: cloud-download-outline
    source:
      api_token: ((secrets.pivnet_api_token))
      product_slug: platform-automation
      product_version: ((platform-automation-version))
      sort_by: semver

  - name: env-state-aws
    type: terraform
    icon: alpha-t-box
    source:
      backend_type: s3
      backend_config:
        bucket: ((buckets.installation))
        key: terraform.tfstate
        endpoint: ((buckets.endpoints.installation))
        access_key: ((secrets.installation_bucket_access_key_id))
        secret_key: ((secrets.installation_bucket_secret_access_key))
        profile: "not_default"
        skip_credentials_validation: ((buckets.minio))
        force_path_style: ((buckets.minio))
      vars:
        env_name: ((pcf.env_name))
        dns_suffix: ((terraform.aws.dns_suffix))
        hosted_zone: ((terraform.aws.hosted_zone))
        region: ((region))
        availability_zones: ((terraform.aws.availability_zones))
        rds_instance_count: ((terraform.aws.rds_instance_count))

        iam_users: false
        ops_manager_vm: false
      env:
        AWS_ACCESS_KEY_ID: ((secrets.access_key_id))
        AWS_SECRET_ACCESS_KEY: ((secrets.secret_access_key))
        AWS_DEFAULT_REGION: ((region))

  - name: env-state-system-cluster
    type: terraform
    icon: alpha-t-box
    source:
      backend_type: s3
      backend_config:
        bucket: ((buckets.installation))
        key: system-cluster.tfstate
        endpoint: ((buckets.endpoints.installation))
        access_key: ((secrets.installation_bucket_access_key_id))
        secret_key: ((secrets.installation_bucket_secret_access_key))
        profile: "not_default"
        skip_credentials_validation: ((buckets.minio))
        force_path_style: ((buckets.minio))
      env:
        AWS_ACCESS_KEY_ID: ((secrets.access_key_id))
        AWS_SECRET_ACCESS_KEY: ((secrets.secret_access_key))
        AWS_DEFAULT_REGION: ((region))

  - name: kubernetes-cluster
    type: kubernetes

  # buckets

  - name: platform-automation-tasks
    type: s3
    icon: folder-google-drive
    source:
      bucket: ((buckets.pivnet_products))
      access_key_id: ((secrets.pivnet_products_bucket_access_key_id))
      secret_access_key: ((secrets.pivnet_products_bucket_secret_access_key))
      endpoint: ((buckets.endpoints.pivnet_products))
      region_name: ((region))
      regexp: platform-automation-tasks-((platform-automation-version)).zip

  - name: platform-automation-image
    type: s3
    icon: folder-google-drive
    source:
      bucket: ((buckets.pivnet_products))
      access_key_id: ((secrets.pivnet_products_bucket_access_key_id))
      secret_access_key: ((secrets.pivnet_products_bucket_secret_access_key))
      endpoint: ((buckets.endpoints.pivnet_products))
      region_name: ((region))
      regexp: platform-automation-image-((platform-automation-version)).tgz

  - name: opsman-image
    type: s3
    icon: folder-google-drive
    source:
      bucket: ((buckets.pivnet_products))
      access_key_id: ((secrets.pivnet_products_bucket_access_key_id))
      secret_access_key: ((secrets.pivnet_products_bucket_secret_access_key))
      endpoint: ((buckets.endpoints.pivnet_products))
      region_name: ((region))
      regexp: ops-manager-aws-(.*).yml

  - name: pks-product
    type: s3
    icon: folder-google-drive
    source:
      bucket: ((buckets.pivnet_products))
      access_key_id: ((secrets.pivnet_products_bucket_access_key_id))
      secret_access_key: ((secrets.pivnet_products_bucket_secret_access_key))
      endpoint: ((buckets.endpoints.pivnet_products))
      region_name: ((region))
      regexp: pivotal-container-service-(.*).pivotal

  - name: harbor-product
    type: s3
    icon: folder-google-drive
    source:
      bucket: ((buckets.pivnet_products))
      access_key_id: ((secrets.pivnet_products_bucket_access_key_id))
      secret_access_key: ((secrets.pivnet_products_bucket_secret_access_key))
      endpoint: ((buckets.endpoints.pivnet_products))
      region_name: ((region))
      regexp: harbor-container-registry-(.*).pivotal

  - name: pks-cli
    type: s3
    icon: folder-google-drive
    source:
      bucket: ((buckets.pivnet_products))
      access_key_id: ((secrets.pivnet_products_bucket_access_key_id))
      secret_access_key: ((secrets.pivnet_products_bucket_secret_access_key))
      endpoint: ((buckets.endpoints.pivnet_products))
      region_name: ((region))
      regexp: pks-linux-amd64-(.*)

  - name: pks-stemcell
    type: s3
    icon: folder-google-drive
    source:
      bucket: ((buckets.pivnet_products))
      access_key_id: ((secrets.pivnet_products_bucket_access_key_id))
      secret_access_key: ((secrets.pivnet_products_bucket_secret_access_key))
      endpoint: ((buckets.endpoints.pivnet_products))
      region_name: ((region))
      regexp: pks-stemcell/light-bosh-stemcell-(.*)-aws.*\.tgz #light-bosh-stemcell-170.15-aws-xen-hvm-ubuntu-xenial-go_agent.tgz

  - name: harbor-stemcell
    type: s3
    icon: folder-google-drive
    source:
      bucket: ((buckets.pivnet_products))
      access_key_id: ((secrets.pivnet_products_bucket_access_key_id))
      secret_access_key: ((secrets.pivnet_products_bucket_secret_access_key))
      endpoint: ((buckets.endpoints.pivnet_products))
      region_name: ((region))
      regexp: harbor-stemcell/light-bosh-stemcell-(.*)-aws.*\.tgz #light-bosh-stemcell-170.15-aws-xen-hvm-ubuntu-xenial-go_agent.tgz

  - name: installation
    type: s3
    icon: book-lock
    source:
      bucket: ((buckets.installation))
      access_key_id: ((secrets.installation_bucket_access_key_id))
      secret_access_key: ((secrets.installation_bucket_secret_access_key))
      endpoint: ((buckets.endpoints.installation))
      region_name: ((region))
      regexp: ((pcf.env_name))/installation-(.*).zip

  - name: certificates
    type: s3
    icon: certificate
    source:
      bucket: ((buckets.installation))
      access_key_id: ((secrets.installation_bucket_access_key_id))
      secret_access_key: ((secrets.installation_bucket_secret_access_key))
      endpoint: ((buckets.endpoints.installation))
      region_name: ((region))
      regexp: ((pcf.env_name))/certificates-(.*).tgz
      initial_path: ((pcf.env_name))/certificates-0.0.0.tgz

  - name: certificates-version
    type: semver
    icon: change_history
    source:
      initial_version: 0.0.0
      key: ((pcf.env_name))/certificates-version.txt
      bucket: ((buckets.installation))
      access_key_id: ((secrets.installation_bucket_access_key_id))
      secret_access_key: ((secrets.installation_bucket_secret_access_key))
      endpoint: ((buckets.endpoints.installation))
      region_name: ((region))

  # configurations
  - name: pcf-automation-source
    type: git
    icon: github-circle
    source:
      uri: ((github.repos.pcf-automation-source.uri))
      branch: ((github.repos.pcf-automation-source.branch))

  - name: kubernetes-lb
    type: git
    icon: github-circle
    source:
      uri: ((github.repos.kubernetes-lb.uri))
      branch: ((github.repos.kubernetes-lb.branch))

  - name: terraforming-aws
    type: git
    icon: github-circle
    source:
      uri: ((github.repos.terraforming-aws.uri))
      branch: ((github.repos.terraforming-aws.branch))

  - name: configuration
    type: git
    icon: github-circle
    source:
      private_key: ((secrets.pcf-config_deploy_rsa_private_key))
      uri: ((github.repos.configuration.uri))
      branch: ((github.repos.configuration.branch))

  # triggers used to have jobs do something in a timely manner

  - name: one-time-trigger
    type: time
    icon: alarm-check
    source:
      interval: 999999h

  - name: daily-trigger
    type: time
    icon: alarm-check
    source:
      interval: 24h

interpolate: &interpolate
  file: pcf-automation-source/tasks/interpolate.yml
  input_mapping:
    config: configuration
    terraform-output: env-state-aws
    certificates: certificates
  output_mapping:
    interpolated-config: configuration-interpolated
  params:
    AWS_ACCESS_KEY_ID: ((secrets.access_key_id))
    AWS_SECRET_ACCESS_KEY: ((secrets.secret_access_key))
    CUSTOMER_NUMBER: ((secrets.customer_number))
    ENV_NAME: ((pcf.env_name))
    HARBOR_PASSWORD: ((secrets.harbor_password))
    OM_DECRYPTION_PASSPHRASE: ((secrets.opsman_decryption-passphrase))
    OM_PASSWORD: ((secrets.opsman_password))
    OM_USERNAME: ((opsman.username))
    PIVNET_API_TOKEN: ((secrets.pivnet_api_token))
    PLAN_NAME: system

make-state-commit: &make-state-commit
  do:
    - task: make-commit
      image: platform-automation-image
      file: platform-automation-tasks/tasks/make-git-commit.yml
      input_mapping:
        repository: configuration
        file-source: generated-state
      output_mapping:
        repository-commit: configuration-commit
      params:
        FILE_SOURCE_PATH: state.yml
        FILE_DESTINATION_PATH: ((pcf.env_name))/state/state.yml
        GIT_AUTHOR_EMAIL: ((pcf.pipeline_email))
        GIT_AUTHOR_NAME: ((pcf.pipeline_name))
        COMMIT_MESSAGE: "Update state file"
    - put: configuration
      params:
        repository: configuration-commit
        merge: true

jobs:
  - name: letsencrypt-certificates
    serial: true
    public: false
    plan:
      - in_parallel:
          - get: certificates-version
            params:
              bump: minor
          - get: pcf-automation-source
          - get: certificates
            params:
              unpack: true
          - get: daily-trigger
            trigger: true
      - task: dehydrated
        file: pcf-automation-source/tasks/dehydrated.yml
        input_mapping:
          certificates: certificates
          certificates-version: certificates-version
        output_mapping:
          certificates: updated-certificates
        params:
          AWS_ACCESS_KEY_ID: ((secrets.access_key_id))
          AWS_SECRET_ACCESS_KEY: ((secrets.secret_access_key))
          ENV_NAME: ((pcf.env_name))
          DNS_SUFFIX: ((terraform.aws.dns_suffix))
          CA: ((dehydrated.ca))
          CURL_OPTS: ((dehydrated.curl_opts))
      - put: certificates-version
        params:
          file: certificates-version/version
      - put: certificates
        params:
          file: updated-certificates/certificates*.tgz

  - name: terraforming-aws
    serial: true
    public: false
    plan:
      - get: pcf-automation-source
      - get: terraforming-aws
      - put: env-state-aws
        params:
          env_name: ((pcf.env_name))
          terraform_source: terraforming-aws/terraforming-pks
          override_files:
            - pcf-automation-source/terraform_override_files/harbor.tf
            - pcf-automation-source/terraform_override_files/caa.tf
          delete_on_failure: false

  - name: configuration
    serial: true
    public: false
    plan:
      - in_parallel:
          - get: pcf-automation-source
            trigger: true
          - get: configuration
      - task: add-new-templates
        input_mapping:
          config: configuration
          pcf-automation: pcf-automation-source
        params:
          ENV_NAME: ((pcf.env_name))
          GIT_AUTHOR_EMAIL: ((pcf.pipeline_email))
          GIT_AUTHOR_NAME: ((pcf.pipeline_name))
          COMMIT_MESSAGE: "Update template files"
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: alpine/git
          inputs:
            - name: config
            - name: pcf-automation
          outputs:
            - name: config-commit
          run:
            path: /bin/sh
            args:
              - -c
              - |
                set -eux
                git clone config config-commit
                mkdir -p config-commit/$ENV_NAME/state
                touch config-commit/$ENV_NAME/state/state.yml
                cp -a pcf-automation/templates/* config-commit/$ENV_NAME
                git config --global user.email "$GIT_AUTHOR_EMAIL"
                git config --global user.name "$GIT_AUTHOR_NAME"
                cd config-commit
                git add -A
                git diff-index --quiet HEAD || git commit -m "$COMMIT_MESSAGE"
      - put: configuration
        params:
          repository: config-commit
          merge: true

  - name: fetch-platform-automation
    # We use the pivnet resource to bootstrap the pipeline,
    # and because this product is part of the pipeline, not the foundation
    plan:
      - get: platform-automation-pivnet
        trigger: true
      - in_parallel:
          - put: platform-automation-tasks
            params:
              file: platform-automation-pivnet/*tasks*.zip
          - put: platform-automation-image
            params:
              file: platform-automation-pivnet/*image*.tgz

  ### FETCH JOBS
  - name: fetch-opsman
    serial: true
    public: false
    plan:
      - in_parallel:
          - get: platform-automation-image
            params:
              unpack: true
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: configuration
            passed: [configuration]
          - get: pcf-automation-source
          - get: env-state-aws
          - get: certificates
            params:
              unpack: true
      - task: interpolate-config
        <<: *interpolate
      - task: download-opsman-image
        image: platform-automation-image
        file: platform-automation-tasks/tasks/download-product.yml
        params:
          CONFIG_FILE: ((pcf.env_name))/download-product-configs/opsman.yml
          VARS_FILES: config/((pcf.env_name))/download-product-configs/vars.yml
        input_mapping:
          config: configuration-interpolated
      - in_parallel:
          - put: opsman-image
            params:
              file: downloaded-product/*

  - name: fetch-pks
    plan:
      - in_parallel:
          - get: platform-automation-image
            params:
              unpack: true
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: configuration
            passed: [configuration]
          - get: pcf-automation-source
          - get: env-state-aws
          - get: certificates
            params:
              unpack: true
      - task: interpolate-config
        <<: *interpolate
      - task: download-pks-product-and-stemcell
        image: platform-automation-image
        file: platform-automation-tasks/tasks/download-product.yml
        params:
          CONFIG_FILE: ((pcf.env_name))/download-product-configs/pks.yml
          VARS_FILES: config/((pcf.env_name))/download-product-configs/vars.yml
        input_mapping:
          config: configuration-interpolated
        output_mapping:
          downloaded-stemcell: pks-stemcell
      - in_parallel:
          - put: pks-product
            params:
              file: downloaded-product/*.pivotal
          - put: pks-stemcell
            params:
              file: pks-stemcell/*.tgz

  - name: fetch-harbor
    plan:
      - in_parallel:
          - get: platform-automation-image
            params:
              unpack: true
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: configuration
            passed: [configuration]
          - get: pcf-automation-source
          - get: env-state-aws
          - get: certificates
            params:
              unpack: true
      - task: interpolate-config
        <<: *interpolate
      - task: download-harbor-product-and-stemcell
        image: platform-automation-image
        file: platform-automation-tasks/tasks/download-product.yml
        params:
          CONFIG_FILE: ((pcf.env_name))/download-product-configs/harbor.yml
          VARS_FILES: config/((pcf.env_name))/download-product-configs/vars.yml
        input_mapping:
          config: configuration-interpolated
        output_mapping:
          downloaded-stemcell: harbor-stemcell
      - in_parallel:
          - put: harbor-product
            params:
              file: downloaded-product/*.pivotal
          - put: harbor-stemcell
            params:
              file: harbor-stemcell/*.tgz

  - name: fetch-pks-cli
    plan:
      - in_parallel:
          - get: platform-automation-image
            params:
              unpack: true
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: configuration
            passed: [configuration]
          - get: pcf-automation-source
          - get: env-state-aws
          - get: certificates
            params:
              unpack: true
      - task: interpolate-config
        <<: *interpolate
      - task: download-pks-product-and-stemcell
        image: platform-automation-image
        file: platform-automation-tasks/tasks/download-product.yml
        params:
          CONFIG_FILE: ((pcf.env_name))/download-product-configs/pks-cli.yml
          VARS_FILES: config/((pcf.env_name))/download-product-configs/vars.yml
        input_mapping:
          config: configuration-interpolated
      - in_parallel:
          - put: pks-cli
            params:
              file: downloaded-product/pks-linux-amd64-*

  # INSTALL JOBS

  - name: install-opsman
    serial: true
    serial_groups: [install]
    plan:
      - in_parallel:
          - get: platform-automation-image
            params:
              unpack: true
          - get: one-time-trigger
            trigger: true
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: certificates
            params:
              unpack: true
            passed: [letsencrypt-certificates]
          - get: opsman-image
            trigger: true
          - get: configuration
          - get: pcf-automation-source
          - get: env-state-aws
      - task: interpolate-config
        <<: *interpolate
      - task: create-vm
        image: platform-automation-image
        file: platform-automation-tasks/tasks/create-vm.yml
        input_mapping:
          image: opsman-image
          state: configuration
          config: configuration-interpolated
        params:
          STATE_FILE: ((pcf.env_name))/state/state.yml
          OPSMAN_CONFIG_FILE: ((pcf.env_name))/config/opsman.yml
        ensure: *make-state-commit
      - task: configure-authentication
        image: platform-automation-image
        file: platform-automation-tasks/tasks/configure-authentication.yml
        attempts: 10
        input_mapping:
          env: configuration-interpolated
          config: configuration-interpolated
        params:
          ENV_FILE: ((pcf.env_name))/env/env.yml
          AUTH_CONFIG_FILE: ((pcf.env_name))/config/auth.yml
      - task: configure-director-ssl
        image: platform-automation-image
        file: pcf-automation-source/tasks/configure-director-ssl.yml
        input_mapping:
          config: configuration-interpolated
          env: configuration-interpolated
        params:
          ENV_FILE: ((pcf.env_name))/env/env.yml
          CERTIFICATE_PEM: ((pcf.env_name))/config/ops_manager_fullchain.pem
          PRIVATE_KEY_PEM: ((pcf.env_name))/config/ops_manager_privkey.pem
      - task: configure-director
        image: platform-automation-image
        file: platform-automation-tasks/tasks/configure-director.yml
        input_mapping:
          config: configuration-interpolated
          env: configuration-interpolated
        params:
          ENV_FILE: ((pcf.env_name))/env/env.yml
          DIRECTOR_CONFIG_FILE: ((pcf.env_name))/config/director.yml
      - task: apply-director-changes
        image: platform-automation-image
        file: platform-automation-tasks/tasks/apply-director-changes.yml
        input_mapping:
          env: configuration-interpolated
        params:
          ENV_FILE: ((pcf.env_name))/env/env.yml
  # UPGRADE

  - name: export-installation
    serial: true
    plan:
      - in_parallel:
          - get: daily-trigger
            trigger: true
          - get: platform-automation-image
            params:
              unpack: true
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: configuration
          - get: pcf-automation-source
          - get: env-state-aws
            passed: [install-opsman]
          - get: certificates
            params:
              unpack: true
            passed: [letsencrypt-certificates]
      - task: interpolate-config
        <<: *interpolate
      - task: export-installation
        image: platform-automation-image
        file: platform-automation-tasks/tasks/export-installation.yml
        input_mapping:
          env: configuration-interpolated
        params:
          ENV_FILE: ((pcf.env_name))/env/env.yml
      - put: installation
        params:
          file: installation/installation-*.zip

  - name: upgrade-opsman
    serial: true
    serial_groups: [install]
    plan:
      - in_parallel:
          - get: one-time-trigger
            passed: [install-opsman]
          - get: platform-automation-image
            params:
              unpack: true
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: opsman-image
            trigger: true
          - get: installation
            passed: [export-installation]
          - get: configuration
          - get: pcf-automation-source
          - get: env-state-aws
          - get: certificates
            params:
              unpack: true
            passed: [letsencrypt-certificates]
      - task: interpolate-config
        <<: *interpolate
      - task: upgrade-opsman
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upgrade-opsman.yml
        input_mapping:
          image: opsman-image
          state: configuration
          config: configuration-interpolated
          env: configuration-interpolated
          vars: configuration-interpolated
        params:
          ENV_FILE: ((pcf.env_name))/env/env.yml
          STATE_FILE: ((pcf.env_name))/state/state.yml
          OPSMAN_CONFIG_FILE: ((pcf.env_name))/config/opsman.yml
        ensure: *make-state-commit
      - task: configure-director-ssl
        image: platform-automation-image
        file: pcf-automation-source/tasks/configure-director-ssl.yml
        input_mapping:
          config: configuration-interpolated
          env: configuration-interpolated
        params:
          ENV_FILE: ((pcf.env_name))/env/env.yml
          CERTIFICATE_PEM: ((pcf.env_name))/config/ops_manager_fullchain.pem
          PRIVATE_KEY_PEM: ((pcf.env_name))/config/ops_manager_privkey.pem
      - task: apply-director-changes
        image: platform-automation-image
        file: platform-automation-tasks/tasks/apply-director-changes.yml
        input_mapping:
          env: configuration-interpolated
        params:
          ENV_FILE: ((pcf.env_name))/env/env.yml

  - name: upload-and-stage-pks-product
    serial: true
    plan:
      - in_parallel:
          - get: platform-automation-image
            params:
              unpack: true
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: pks-product
            trigger: true
          - get: configuration
            passed: [upgrade-opsman]
          - get: pcf-automation-source
          - get: env-state-aws
          - get: certificates
            params:
              unpack: true
            passed: [letsencrypt-certificates]
      - task: interpolate-config
        <<: *interpolate
      - task: upload-product
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-product.yml
        input_mapping:
          product: pks-product
          env: configuration-interpolated
        params:
          ENV_FILE: ((pcf.env_name))/env/env.yml
      - task: stage-product
        image: platform-automation-image
        file: platform-automation-tasks/tasks/stage-product.yml
        input_mapping:
          product: pks-product
          env: configuration-interpolated
        params:
          ENV_FILE: ((pcf.env_name))/env/env.yml

  - name: upload-and-stage-harbor-product
    serial: true
    plan:
      - in_parallel:
          - get: platform-automation-image
            params:
              unpack: true
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: harbor-product
            trigger: true
          - get: configuration
            passed: [upgrade-opsman]
          - get: pcf-automation-source
          - get: env-state-aws
          - get: certificates
            params:
              unpack: true
            passed: [letsencrypt-certificates]
      - task: interpolate-config
        <<: *interpolate
      - task: upload-product
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-product.yml
        input_mapping:
          product: harbor-product
          env: configuration-interpolated
        params:
          ENV_FILE: ((pcf.env_name))/env/env.yml
      - task: stage-product
        image: platform-automation-image
        file: platform-automation-tasks/tasks/stage-product.yml
        input_mapping:
          product: harbor-product
          env: configuration-interpolated
        params:
          ENV_FILE: ((pcf.env_name))/env/env.yml

  - name: upload-pks-stemcell
    serial: true
    plan:
      - in_parallel:
          - get: platform-automation-image
            params:
              unpack: true
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: pks-stemcell
            trigger: true
          - get: configuration
            passed: [upgrade-opsman]
          - get: pcf-automation-source
          - get: env-state-aws
          - get: certificates
            params:
              unpack: true
            passed: [letsencrypt-certificates]
      - task: interpolate-config
        <<: *interpolate
      - task: upload-pks-stemcell
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-stemcell.yml
        input_mapping:
          env: configuration-interpolated
          stemcell: pks-stemcell
        params:
          ENV_FILE: ((pcf.env_name))/env/env.yml

  - name: upload-harbor-stemcell
    serial: true
    plan:
      - in_parallel:
          - get: platform-automation-image
            params:
              unpack: true
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: harbor-stemcell
            trigger: true
          - get: configuration
            passed: [upgrade-opsman]
          - get: pcf-automation-source
          - get: env-state-aws
          - get: certificates
            params:
              unpack: true
            passed: [letsencrypt-certificates]
      - task: interpolate-config
        <<: *interpolate
      - task: upload-harbor-stemcell
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-stemcell.yml
        input_mapping:
          env: configuration-interpolated
          stemcell: harbor-stemcell
        params:
          ENV_FILE: ((pcf.env_name))/env/env.yml

  - name: configure-pks-product
    serial: true
    plan:
      - in_parallel:
          - get: platform-automation-image
            params:
              unpack: true
            passed:
              - upload-and-stage-pks-product
            trigger: true
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: configuration
          - get: pcf-automation-source
          - get: env-state-aws
          - get: certificates
            params:
              unpack: true
            passed: [letsencrypt-certificates]
            trigger: true
      - task: interpolate-config
        <<: *interpolate
      - task: configure-product
        image: platform-automation-image
        file: platform-automation-tasks/tasks/configure-product.yml
        input_mapping:
          config: configuration-interpolated
          env: configuration-interpolated
        params:
          CONFIG_FILE: ((pcf.env_name))/config/pks.yml
          ENV_FILE: ((pcf.env_name))/env/env.yml

  - name: configure-harbor-product
    serial: true
    plan:
      - in_parallel:
          - get: platform-automation-image
            params:
              unpack: true
            passed:
              - upload-and-stage-harbor-product
            trigger: true
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: configuration
          - get: pcf-automation-source
          - get: env-state-aws
          - get: certificates
            params:
              unpack: true
            passed: [letsencrypt-certificates]
            trigger: true
      - task: interpolate-config
        <<: *interpolate
      - task: configure-product
        image: platform-automation-image
        file: platform-automation-tasks/tasks/configure-product.yml
        input_mapping:
          config: configuration-interpolated
          env: configuration-interpolated
        params:
          CONFIG_FILE: ((pcf.env_name))/config/harbor.yml
          ENV_FILE: ((pcf.env_name))/env/env.yml

  - name: apply-product-changes
    serial: true
    plan:
      - in_parallel:
          - get: platform-automation-image
            params:
              unpack: true
            passed:
              - configure-pks-product
              - upload-pks-stemcell
              - configure-harbor-product
              - upload-harbor-stemcell
            trigger: true
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: configuration
          - get: pcf-automation-source
          - get: env-state-aws
          - get: certificates
            params:
              unpack: true
            passed: [letsencrypt-certificates]
      - task: interpolate-config
        <<: *interpolate
      - task: apply-product-changes
        image: platform-automation-image
        file: platform-automation-tasks/tasks/apply-changes.yml
        input_mapping:
          env: configuration-interpolated
        params:
          ENV_FILE: ((pcf.env_name))/env/env.yml

  - name: create-system-cluster
    serial: true
    public: false
    plan:
      - in_parallel:
          - get: kubernetes-lb
          - get: platform-automation-image
            params:
              unpack: true
            passed:
              - apply-product-changes
            trigger: true
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: configuration
          - get: pcf-automation-source
          - get: env-state-aws
          - get: pks-cli
          - get: certificates
            params:
              unpack: true
            passed: [letsencrypt-certificates]
            trigger: true
      - task: interpolate-config
        <<: *interpolate
      - task: create-system-cluster
        image: platform-automation-image
        file: pcf-automation-source/tasks/create-cluster.yml
        params:
          CLUSTER_NAME: system
          PLAN_NAME: system
          ENV_NAME: ((pcf.env_name))
          DNS_NAME: ((terraform.aws.dns_suffix))
          ENV_FILE: ((pcf.env_name))/env/env.yml
          SUBNETS_FILE: ((pcf.env_name))/config/public_subnets.txt
          AWS_ACCESS_KEY_ID: ((secrets.access_key_id))
          AWS_SECRET_ACCESS_KEY: ((secrets.secret_access_key))
          AWS_DEFAULT_REGION: ((region))
          OPS_MANAGER_KEY_PATH: ((pcf.env_name))/config/ops_manager_ssh_private_key.pem
        input_mapping:
          env: configuration-interpolated
          pks-cli: pks-cli
        output_mapping:
          master-instances: master-instances
      - put: env-state-system-cluster
        params:
          env_name: ((pcf.env_name))
          terraform_source: kubernetes-lb
          var_files:
            - master-instances/pks-cluster.json
            - env-state-aws/metadata
            - master-instances/cluster.yml
          vars:
            cluster_host: system.pks.((pcf.env_name)).((terraform.aws.dns_suffix))
            cluster_name: system
      - put: env-state-system-cluster
        params:
          env_name: ((pcf.env_name))
          plan_only: true
          terraform_source: kubernetes-lb
          var_files:
            - master-instances/system.pks-cluster.json
            - env-state-aws/metadata
            - master-instances/system.cluster.yml
          vars:
            cluster_host: system.pks.((pcf.env_name)).((terraform.aws.dns_suffix))
            cluster_name: system
      - put: kubernetes-cluster
        params:
          kubeconfig_file: master-instances/kubeconfig
          kubectl: apply -f configuration-interpolated/((pcf.env_name))/config/manifests
    

  - name: destroy-installation
    serial: true
    public: false
    plan:
      - in_parallel:
          - get: env-state-aws
          - get: pcf-automation-source
            trigger: false
          - get: platform-automation-image
            params:
              unpack: true
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: configuration
          - get: certificates
            params:
              unpack: true
            passed: [letsencrypt-certificates]
      - task: interpolate-config
        <<: *interpolate
      - try:
          task: delete-installation
          image: platform-automation-image
          file: platform-automation-tasks/tasks/delete-installation.yml
          input_mapping:
            env: configuration-interpolated
          params:
            ENV_FILE: ((pcf.env_name))/env/env.yml
      - task: delete-vm
        image: platform-automation-image
        file: platform-automation-tasks/tasks/delete-vm.yml
        input_mapping:
          state: configuration
          config: configuration-interpolated
        params:
          STATE_FILE: ((pcf.env_name))/state/state.yml
          OPSMAN_CONFIG_FILE: ((pcf.env_name))/config/opsman.yml

  - name: destroy-terraform
    serial: true
    public: false
    plan:
      - in_parallel:
          - get: terraforming-aws
            trigger: false
          - get: kubernetes-lb
            trigger: false
          - get: configuration
          - get: env-state-aws
            passed: [destroy-installation]
          - get: env-state-system-cluster
      - try:
          put: env-state-system-cluster
          params:
            terraform_source: kubernetes-lb
            delete_on_failure: true
            env_name: ((pcf.env_name))
            action: destroy
          get_params:
            action: destroy
      - put: env-state-aws
        params:
          terraform_source: terraforming-aws/terraforming-pks
          delete_on_failure: true
          env_name: ((pcf.env_name))
          action: destroy
        get_params:
          action: destroy
      - task: delete-config
        input_mapping:
          config: configuration
        params:
          ENV_NAME: ((pcf.env_name))
          GIT_AUTHOR_EMAIL: ((pcf.pipeline_email))
          GIT_AUTHOR_NAME: ((pcf.pipeline_name))
          COMMIT_MESSAGE: "Delete Environment"
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: alpine/git
          inputs:
            - name: config
          outputs:
            - name: config-commit
          run:
            path: /bin/sh
            args:
              - -c
              - |
                set -eux
                git clone config config-commit
                rm -rf config-commit/$ENV_NAME
                git config --global user.email "$GIT_AUTHOR_EMAIL"
                git config --global user.name "$GIT_AUTHOR_NAME"
                cd config-commit
                git add -A
                git diff-index --quiet HEAD || git commit -m "$COMMIT_MESSAGE"
      - put: configuration
        params:
          repository: config-commit
          merge: true

groups:
  - name: prepare
    jobs:
      - letsencrypt-certificates
      - terraforming-aws
      - configuration
      - fetch-platform-automation
  - name: fetch
    jobs:
      - fetch-opsman
      - fetch-pks
      - fetch-harbor
      - fetch-pks-cli
  - name: install-platform
    jobs:
      - install-opsman
  - name: upgrade-platform
    jobs:
      - export-installation
      - upgrade-opsman
      - export-installation
  - name: install-product
    jobs:
      - upload-and-stage-pks-product
      - upload-pks-stemcell
      - configure-pks-product
      - upload-and-stage-harbor-product
      - upload-harbor-stemcell
      - configure-harbor-product
      - apply-product-changes
      - export-installation
  - name: configure-clusters
    jobs:
      - create-system-cluster
  - name: destroy
    jobs:
      - destroy-terraform
      - destroy-installation
